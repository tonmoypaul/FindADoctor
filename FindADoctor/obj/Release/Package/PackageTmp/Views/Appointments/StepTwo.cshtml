@model FindADoctor.Models.StepTwoViewModel

@{
    ViewBag.Title = "Appointment";
}

<h2>@ViewBag.Title</h2>

<div class="row">
    <div class="col-md-12">
        <div class="progress progress-striped active">
            <div class="progress-bar" style="width: 45%">Choose Suitable Medical Center</div>
        </div>
    </div>
</div>


@using (Html.BeginForm("StepThree", "Appointments", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
                <div class="col-md-offset-1 col-md-10">
                    <table class="table table-hover table-striped">
                        @foreach (var item in Model.MedicalCenters)
                        {
                            <tr>
                                <td>@Html.RadioButtonFor(r => r.SelectedMedicalCenter, item.Id)</td>
                                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                                <td>
                                    <address>@Html.DisplayFor(modelItem => item.Address)<br />@Html.DisplayFor(modelItem => item.Suburb)<br />@Html.DisplayFor(modelItem => item.City)<br />@Html.DisplayFor(modelItem => item.PostCode)</address>
                                </td>
                                <td>@Html.DisplayFor(modelItem => item.Phone)</td>
                                @*<td><button type="button" class="btn btn-default getDistance" id="@Html.DisplayFor(modelItem => item.Id)" onclick="getDistance(@Html.DisplayFor(modelItem => item.Id), @Html.DisplayFor(modelItem => item.Latitute), @Html.DisplayFor(modelItem => item.Longitude))">Check Distance</button></td>
                                    <td><span id="@Html.DisplayFor(modelItem => item.Id)"></span></td>*@
                            </tr>

                            if (item == null)
                            {
                                <tr><td>Sorry! There is no medical center found where you can go for the help you need.</td></tr>
                            }
                        }
                    </table>
                </div>
            </div>
        
        <div class="form-group">
            <div class="col-md-offset-4">
                @Html.HiddenFor(x => x.SelectedSpecialty, new { @SelectedSpecialty = Model.SelectedSpecialty })
                @Html.ActionLink("<< Go Back", "StepOne", null, new { @class = "btn btn-default" })
                <input type="submit" value="Check Available Doctors >>" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $("getDistance").click(function (event) {
                var x = event.target.id;
            });
        });

        function getDistance(spanId, desLat, desLong) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);

                function showPosition(position) {
                    var orgLat = position.coords.latitude;
                    var orgLong = position.coords.longitude;

                    var origin = "40 Mt Wellington Highway"; //new google.maps.LatLng(76.00, 52.00);
                    var destination = "128 Mt Wellington Highway"; //new google.maps.LatLng(21.00, 25.44);

                    var service = new google.maps.DistanceMatrixService();
                    service.getDistanceMatrix(
                        {
                            origins: [origin],
                            destinations: [destination],
                            travelMode: 'DRIVING',
                            unitSystem: google.maps.UnitSystem.METRIC,
                            avoidHighways: false,
                            avoidTolls: false,
                        }, callback);
                }

            } else {
                alert("Sorry! Geolocation is not supported by this browser.");
            }
   
        }

        

        function callback(response, status) {
            if (status == 'OK') {
                var origins = response.originAddresses;
                var destinations = response.destinationAddresses;

                for (var i = 0; i < origins.length; i++) {
                    var results = response.rows[i].elements;
                    for (var j = 0; j < results.length; j++) {
                        var element = results[j];
                        var distance = element.distance.text;
                        var duration = element.duration.text;
                        var from = origins[i];
                        var to = destinations[j];

                        var y = document.getElementById("x");
                        y.value = distance;
                    }
                }

                //for (var i = 0; i < origins.length; i++) {
                /*    var element = response.rows.elements[0];
                    var distance = element.distance.text;
                    var duration = element.duration.text;
                    var duration = 
                    var from = origins[0];
                    var to = destinations[0];

                    var y = document.getElementById("x");
                    y.value = distance;
                //}
                */

            } else {
                alert("Error: " + status);
            }
        }

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDd6h7LU7y7mSi9rB91_JpErAq-p9xHAyU&callback">
    </script>

}

    